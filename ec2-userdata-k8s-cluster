#!/bin/bash
# Update the system
apt-get update -y && apt-get upgrade -y

# Disable swap (required for Kubernetes)
swapoff -a
sed -i '/ swap / s/^/#/' /etc/fstab

# Install Docker
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt-get update -y
apt-get install -y docker-ce

# Enable Docker and start the service
systemctl enable docker
systemctl start docker

# Configure sysctl for Kubernetes
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

# Install kubeadm, kubelet, and kubectl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF | tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update -y
apt-get install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

# Initialize Kubernetes master node or join worker nodes
INSTANCE_TAG=$(curl -s http://169.254.169.254/latest/meta-data/tags/instance/role)

if [ "$INSTANCE_TAG" == "master" ]; then
  kubeadm init --pod-network-cidr=192.168.0.0/16
  
  # Configure kubectl for the root user
  mkdir -p $HOME/.kube
  cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  chown $(id -u):$(id -g) $HOME/.kube/config
  
  # Install a pod network (we'll use Calico here)
  kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

  # Generate join command for worker nodes
  kubeadm token create --print-join-command > /join-command.sh
  chmod +x /join-command.sh
else
  # Wait for the master node's join command to be ready
  while [ ! -f /join-command.sh ]; do sleep 10; done
  bash /join-command.sh
fi

# Enable kubelet service
systemctl enable kubelet

#Steps:
#Instance Tags: Assign the tag role=master to the EC2 instance intended to be the master node. Use role=worker for worker nodes.
#Launch EC2 Instances: Provide the above script as user-data while launching each EC2 instance.
#Security Groups:
#Allow inbound traffic on ports 6443 (API server), 10250 (kubelet), and others required for Kubernetes communication.
#Allow nodes to communicate with each other (NodePort, pod-to-pod traffic).
#Network: The script uses the Calico network plugin. Make sure the CIDR (192.168.0.0/16) doesn't conflict with existing networks.
#Master Node Output: Check the /join-command.sh file on the master node for the worker nodes to join.

